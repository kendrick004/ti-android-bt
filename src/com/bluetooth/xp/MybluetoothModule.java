/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.bluetooth.xp;

import java.util.HashMap;

import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.util.TiActivityResultHandler;
import org.appcelerator.titanium.util.TiActivitySupport;
import org.appcelerator.kroll.common.Log;

import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;

@Kroll.module(name = "Mybluetooth", id = "com.bluetooth.xp")
public class MybluetoothModule extends KrollModule implements
		TiActivityResultHandler {

	// Standard Debugging variables
	private static final String TAG = "MybluetoothModule";
	protected KrollFunction resultCallback;
	protected KrollFunction connectCallback;
	protected KrollFunction otherCallback;
	// Member fields
	private BluetoothAdapter mBtAdapter;
	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;

	public MybluetoothModule() {
		super();
		mBtAdapter = BluetoothAdapter.getDefaultAdapter();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app) {
		Log.d(TAG, "inside onAppCreate");
		// put module init code that needs to run when the application is
		// created
	}

	@Override
	public void onStart(Activity activity) {
		Log.d(TAG, "[MODULE LIFECYCLE EVENT] start");
		
		activity.setResult(Activity.RESULT_CANCELED);
		
		// Register for broadcasts when a device is discovered
		IntentFilter filter = new IntentFilter(BluetoothDevice.ACTION_FOUND);
		activity.registerReceiver(mReceiver, filter);

		// Register for broadcasts when discovery has finished
		filter = new IntentFilter(BluetoothAdapter.ACTION_DISCOVERY_FINISHED);
		activity.registerReceiver(mReceiver, filter);
		
		super.onStart(activity);
	}

	@Override
	public void onResume(Activity activity) {
		Log.d(TAG, "[MODULE LIFECYCLE EVENT] resume");
		super.onResume(activity);
	}

	@Override
	public void onPause(Activity activity) {
		Log.d(TAG, "[MODULE LIFECYCLE EVENT] pause");
		super.onPause(activity);
	}
	

	@Override
	public void onStop(Activity activity) {
		Log.d(TAG, "[MODULE LIFECYCLE EVENT] stop");
		super.onStop(activity);
	}
	
	@Override
	public void onDestroy(Activity activity) {
		Log.d(TAG, "[MODULE LIFECYCLE EVENT] destroy");
		// Make sure we're not doing discovery anymore
		if (mBtAdapter != null) {
			mBtAdapter.cancelDiscovery();
		}

		// Unregister broadcast listeners
		activity.unregisterReceiver(mReceiver);
		super.onDestroy(activity);
	}

	@Kroll.method
	public void run() {
		Activity activity = TiApplication.getAppCurrentActivity();
		TiActivitySupport activitySupport = (TiActivitySupport) activity;
		// Intent for bluetooth
		if (!mBtAdapter.isEnabled()) {
			Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
			int code = activitySupport.getUniqueResultCode();
			activitySupport.launchActivityForResult(enableBtIntent, code, this);
		}
	}
	// Methods
	@Kroll.method
	public void getResult(KrollFunction  handler)
	{
		this.resultCallback = handler;
	}
	
	@Kroll.method
	public void discovery(){
		doDiscovery();
	}
	
	// Create a BroadcastReceiver for ACTION_FOUND
	private final BroadcastReceiver mReceiver = new BroadcastReceiver() {
		public void onReceive(Context context, Intent intent) {
			Log.d(TAG, "[MODULE LIFECYCLE EVENT] Start Receiver");
			String action = intent.getAction();
			// When discovery finds a device
			if (BluetoothDevice.ACTION_FOUND.equals(action)) {
				// Get the BluetoothDevice object from the Intent
				BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
				// Add the name and address to an array adapter to show in a
				// ListView
				Log.d(TAG,"[MODULE LIFECYCLE EVENT] Devices: " + device.getName() + "\n" + device.getAddress());
				 HashMap<String, String> devices = new HashMap<String, String>();
				 devices.put("name" , device.getName());
				 devices.put("address" , device.getAddress());
				 devices.put("bonded", ""+device.getBondState());
				 HashMap<String, Object> returned = new HashMap<String, Object>();
				 returned.put("resultString" , devices);
				 resultCallback.call(getKrollObject(),returned);
			} else if (BluetoothAdapter.ACTION_DISCOVERY_FINISHED.equals(action)) {
				Log.d(TAG,"[MODULE LIFECYCLE EVENT] END Receiver");
			}
		}
	};
	
	@Override
	public void onError(Activity activity, int requestCode, Exception e) {
		// TODO Auto-generated method stub
		Log.d(TAG, "[MODULE LIFECYCLE EVENT] RESULT FAIL");
	}

	@Override
	public void onResult(Activity activity, int requestCode, int resultCode,
			Intent data) {
		// TODO Auto-generated method stub
		Log.d(TAG, "[MODULE LIFECYCLE EVENT] RequestCode : " + requestCode
				+ " - ResultCode : " + resultCode);
		if (resultCode == Activity.RESULT_OK) {
			Log.d(TAG, "[MODULE LIFECYCLE EVENT] RESULT OK");
		} else if (resultCode == Activity.RESULT_CANCELED) {
			Log.d(TAG, "[MODULE LIFECYCLE EVENT] RESULT CANCEL");
		} else {
			activity.finish();
		}
	}
	
	private void doDiscovery() {
		// If we're already discovering, stop it
		if (mBtAdapter.isDiscovering()) {
			mBtAdapter.cancelDiscovery();
			Log.d(TAG, "[MODULE LIFECYCLE EVENT] Cancel before Do discovery");
		}

		Log.d(TAG, "[MODULE LIFECYCLE EVENT] Do discovery");
		// Request discover from BluetoothAdapter
		mBtAdapter.startDiscovery();
	}

}
